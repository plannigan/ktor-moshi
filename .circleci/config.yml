# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1
orbs:
  codecov: codecov/codecov@1.1.0

# Reusable config blocks
.not_github_pages: &not_github_pages
    filters:
      branches:
        ignore: gh-pages
      tags:
        only: /.*/

.job_defaults: &job_defaults
  docker:
    # specify the version you desire here
    - image: circleci/openjdk:8-jdk

  working_directory: ~/repo

  environment:
    # Customize the JVM maximum heap limit
    JVM_OPTS: -Xmx3200m
    TERM: dumb


workflows:
  version: 2
  main:
    jobs:
      - check_core:
          <<: *not_github_pages
      - build_core:
          <<: *not_github_pages
      - integration_test:
          <<: *not_github_pages
      - deploy:
          requires:
            - build_core
            - check_core
            - integration_test
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+([-\w]+)?$/
            branches:
              ignore: /.*/


commands:
  check:
    description: "perform check for a specific sub-project"
    parameters:
      project:
        description: "Name of the gradle sub-project"
        type: string
    steps:
      - checkout

      - with_gradle_cache:
          project: << parameters.project >>
          task:
            - run: ./gradlew << parameters.project >>:check

      # publish results
      - store_test_results:
          path: << parameters.project >>/build/test-results/test
      - store_artifacts:
          path: << parameters.project >>/build/test-results/test
          when: always
      - store_artifacts:
          path: << parameters.project >>/build/reports/jacoco/test/jacocoTestReport.xml
          when: always
      - codecov/upload:
          file: << parameters.project >>/build/reports/jacoco/test/jacocoTestReport.xml

  build:
    description: "build a jar for a specific sub-project"
    parameters:
      project:
        description: "Name of the gradle sub-project"
        type: string
    steps:
      - checkout

      - with_gradle_cache:
          project: << parameters.project >>
          task:
            - run: ./gradlew assemble

      - store_artifacts:
          path: << parameters.project >>/build/libs

  with_gradle_cache:
    description: "restore dependency cache from previous runs & populate cache for future runs"
    parameters:
      task:
        description: "Steps to be wrapped by gradle caching"
        type: steps
      project:
        description: "Name of the gradle sub-project"
        type: string
    steps:
      - run:
          name: Create cache key for build scripts and dependencies
          command: |
            mkdir -p /tmp
            find ./buildSrc/ -name "Dependencies.kt" -type f > /tmp/to_hash.txt
            find ./gradle/ -name "gradle-wrapper.properties" -type f >> /tmp/to_hash.txt
            find . -name "*.gradle.kts" -type f >> /tmp/to_hash.txt
            cat /tmp/to_hash.txt | sort | xargs sha256sum > /tmp/gradle_cache_key.sha256
      - restore_cache:
          key: v1-gradle-<< parameters.project >>-{{ checksum "/tmp/gradle_cache_key.sha256" }}-{{ checksum ".circleci/config.yml" }}
      - steps: << parameters.task >>
      - save_cache:
          paths:
            - ~/.gradle/caches/
            - ~/.gradle/wrapper/
          key: v1-gradle-<< parameters.project >>-{{ checksum "/tmp/gradle_cache_key.sha256" }}-{{ checksum ".circleci/config.yml" }}


jobs:
  check_core:
    <<: *job_defaults
    steps:
      - check:
          project: core

  build_core:
    <<: *job_defaults
    steps:
      - build:
          project: core

  integration_test:
    <<: *job_defaults
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - setup_remote_docker
      - run: docker-compose run sample-client-check

  deploy:
    <<: *job_defaults
    steps:
      - checkout

      - with_gradle_cache:
          project: core
          task:
            - run: ./gradlew bintrayUpload
